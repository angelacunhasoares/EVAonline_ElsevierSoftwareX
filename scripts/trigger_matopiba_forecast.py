"""
Trigger manual do c√°lculo MATOPIBA para testar corre√ß√£o do R¬≤.

Executa calculate_eto_matopiba_batch() diretamente (sem Celery)
para ver m√©tricas atualizadas imediatamente.
"""

import sys
from pathlib import Path

# Add project root to path
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from backend.api.services.openmeteo_matopiba_client import \
    OpenMeteoMatopibaClient
from backend.core.eto_calculation.eto_matopiba import \
    calculate_eto_matopiba_batch


def main():
    print("="*70)
    print("üöÄ TRIGGER MANUAL: C√°lculo ETo MATOPIBA")
    print("="*70)
    print("\n‚ö†Ô∏è  Este script chama a fun√ß√£o DIRETAMENTE (sem Celery)")
    print("    Tempo estimado: ~60-90 segundos para 337 cidades\n")
    
    # Confirmar
    resposta = input("Continuar? (s/N): ").strip().lower()
    if resposta != 's':
        print("‚ùå Cancelado pelo usu√°rio")
        return
    
    print("\n1Ô∏è‚É£ Buscando dados Open-Meteo...")
    client = OpenMeteoMatopibaClient()
    
    try:
        # Buscar dados (hoje + amanh√£)
        forecasts, warnings_api = client.get_forecasts_all_cities()
        
        if not forecasts:
            print("‚ùå Erro ao buscar dados da API")
            return
        
        print(f"‚úÖ Dados recebidos: {len(forecasts)} cidades")
        
        if warnings_api:
            print(f"‚ö†Ô∏è  {len(warnings_api)} avisos da API")
        
        # Calcular ETo
        print("\n2Ô∏è‚É£ Calculando ETo para todas as cidades...")
        print("   (aguarde ~60s...)")
        
        # calculate_eto_matopiba_batch espera cities_data (dict com city_code: city_data)
        results, warnings, validation_metrics = calculate_eto_matopiba_batch(
            cities_data=forecasts
        )
        
        print(f"\n‚úÖ C√°lculo conclu√≠do: {len(results)} cidades")
        
        # Exibir m√©tricas
        print("\n" + "="*70)
        print("üìä M√âTRICAS DE VALIDA√á√ÉO (AP√ìS CORRE√á√ÉO R¬≤)")
        print("="*70)
        
        r2 = validation_metrics.get('r2', 0)
        rmse = validation_metrics.get('rmse', 0)
        bias = validation_metrics.get('bias', 0)
        mae = validation_metrics.get('mae', 0)
        n_samples = validation_metrics.get('n_samples', 0)
        status = validation_metrics.get('status', 'N/A')
        
        print(f"\n  R¬≤ (correla√ß√£o):      {r2:.4f}")
        print(f"  RMSE (erro):          {rmse:.3f} mm/dia")
        print(f"  Bias (vi√©s):          {bias:.3f} mm/dia")
        print(f"  MAE (erro absoluto):  {mae:.3f} mm/dia")
        print(f"  Amostras:             {n_samples}")
        print(f"  Status:               {status}")
        
        # An√°lise
        print("\n" + "="*70)
        print("üîç AN√ÅLISE")
        print("="*70)
        
        if r2 < 0:
            print("\n‚ùå R¬≤ AINDA NEGATIVO!")
            print("   Poss√≠veis causas:")
            print("   - Ordem em outro local n√£o corrigida")
            print("   - Dados corrompidos no cache")
            print("   - Bug em aggregate_hourly_to_daily")
        elif r2 < 0.65:
            print(f"\n‚ö†Ô∏è  R¬≤ = {r2:.3f} - INSUFICIENTE")
            print("   Esperado: 0.65-0.85 para correla√ß√£o boa")
            print("   Problema pode estar no c√°lculo, n√£o s√≥ valida√ß√£o")
        elif r2 < 0.75:
            print(f"\n‚úÖ R¬≤ = {r2:.3f} - BOM!")
            print("   Corre√ß√£o funcionou! R¬≤ agora √© positivo e aceit√°vel.")
        else:
            print(f"\nüéâ R¬≤ = {r2:.3f} - EXCELENTE!")
            print("   Corre√ß√£o funcionou perfeitamente!")
        
        # Verificar 87% discrep√¢ncia
        if abs(bias) > 3.0:
            print(f"\n‚ö†Ô∏è  Bias = {bias:.2f} mm/dia - MUITO ALTO!")
            print("   ETo_EVAonline ainda muito diferente de ETo_OpenMeteo")
            print("   Pr√≥ximo passo: investigar unidades/agrega√ß√£o")
        elif abs(bias) > 1.0:
            print(f"\n‚ö†Ô∏è  Bias = {bias:.2f} mm/dia - MODERADO")
            print("   Diferen√ßa aceit√°vel para modelos diferentes")
        else:
            print(f"\n‚úÖ Bias = {bias:.2f} mm/dia - EXCELENTE!")
        
        # Avisos
        if warnings:
            print(f"\n‚ö†Ô∏è  {len(warnings)} avisos durante c√°lculo")
            print("   Primeiros 5:")
            for w in warnings[:5]:
                print(f"   - {w}")
        
        print("\n" + "="*70)
        print("‚úÖ TRIGGER CONCLU√çDO")
        print("="*70)
        print("\nPr√≥ximos passos:")
        print("  1. Se R¬≤ positivo ‚Üí corre√ß√£o funcionou! ‚úÖ")
        print("  2. Se Bias alto ‚Üí investigar unidades/agrega√ß√£o")
        print("  3. Executar vetoriza√ß√£o para melhorar performance")
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
